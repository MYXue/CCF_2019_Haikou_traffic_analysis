# -*- coding: utf-8 -*
"""
2019-10-21
pyecharts 路径图
根据输入的起始点和终点，利用百度API进行路径规划，输出路径中的一系列经纬度
根据经纬度序列画图
"""
import sys
sys.path.append('../')
from util_data_load_dump import load_data_of, get_datda_near
import json
from crawl_routes import get_route_list

from pyecharts.charts import BMap
from pyecharts import options as opts
from pyecharts.globals import BMapType, ChartType, SymbolType
import datetime

Baidu_AK = "EHuurxP38XIGCpLjqVP0cgze5vErTzz6"

def make_route_from(df):
    taix_lines = []
    for index, row in df.iterrows():
        departure = [row['starting_lng'], row['starting_lat']]
        arrive = [row['dest_lng'], row['dest_lat']]
        a_route = get_route_list(departure, arrive)
        taix_lines.append({"coords":a_route,"lineStyle":{"normal":{"color":"rgba(223,90,90,1)"}}})
    return taix_lines

def draw_route_map(taix_lines):
    def bmap_route_map() -> BMap:
        c = (
            BMap(init_opts = opts.InitOpts(theme = "white", width="800px", height="600px"))
            .add_schema(baidu_ak=Baidu_AK, center=[110.3131940000, 20.0274250000], zoom=13)  #缩放比例12-14之间可行
            .set_global_opts(
                title_opts=opts.TitleOpts(title="09/20 17:30-17:31"),  # 更改title====================
                visualmap_opts=opts.VisualMapOpts(is_show=False),
            )
        )
   
        # 增加路径线
        c.add(
            "行车路径模拟",
            type_="lines",
            is_polyline=True,
            data_pair=taix_lines,
            linestyle_opts=opts.LineStyleOpts(opacity=0.2, width=0.5),
            # 如果不是最新版本的话可以注释下面的参数（效果差距不大）
            # progressive=200,
            # progressive_threshold=500
        )

        c.add_control_panel(navigation_control_opts=opts.BMapNavigationControlOpts(offset_height=30),
                            scale_control_opts=opts.BMapScaleControlOpts(),)

        return c

    #可视化
    geo = bmap_route_map()
    geo.render( 'route_bmap.html')


if __name__ == '__main__':
    data_file = "D:/CCF2019/data/selected_data/" + "DAY_WEEKDAY_0920" + ".csv"  # 选择数据======================
    date_imterval = ['2017-09-20', '2017-09-20']   #  选择时间===========================
    time_interval = [17, 18]  #  选择时间===========================

    df = load_data_of(file=data_file,
                      dates=date_imterval, time_interval=time_interval,
                      columns=['order_id', 'departure_time', 'arrive_time', 'dest_lng', 'dest_lat', 'starting_lng', 'starting_lat','normal_time'])

    print(df.shape)
    df = df[(df['departure_time'] >=  datetime.datetime(2017, 9, 20, 17, 30, 0)) & (df['departure_time'] < datetime.datetime(2017, 9, 20, 17, 31, 0))]
    print(df.shape)

    ## 需要对经纬度坐标进行一下纠偏
    df['starting_lng'] = df.apply(lambda row: gcj02_to_bd09(row['starting_lng'], row['starting_lat'])[0], axis=1)
    df['starting_lat'] = df.apply(lambda row: gcj02_to_bd09(row['starting_lng'], row['starting_lat'])[1], axis=1)
    df['dest_lng'] = df.apply(lambda row: gcj02_to_bd09(row['dest_lng'], row['dest_lat'])[0], axis=1)
    df['dest_lat'] = df.apply(lambda row: gcj02_to_bd09(row['dest_lng'], row['dest_lat'])[1], axis=1)
    # print(df.head())

    taix_lines = make_route_from(df)

    # # a_route = [[110.268744, 20.015395], [110.268126, 20.0153864], [110.268126, 20.0153863], [110.268126, 20.0167163], [110.268096, 20.0170759], [110.268136, 20.0172465], [110.268136, 20.0172465], [110.268565, 20.0172825], [110.271707, 20.0175936], [110.272037, 20.0176176], [110.272745, 20.0176858], [110.272915, 20.0176977], [110.273344, 20.0177425], [110.273643, 20.0177657], [110.273813, 20.0177876], [110.274841, 20.0179182], [110.27525, 20.0180121], [110.27525, 20.0180121], [110.27562, 20.0180056], [110.275969, 20.0180788], [110.277127, 20.0183188], [110.277317, 20.0183503], [110.277627, 20.0184227], [110.277677, 20.0184331], [110.278036, 20.0185258], [110.278296, 20.0186777], [110.280164, 20.0190496], [110.281433, 20.019186], [110.281942, 20.0192081], [110.282252, 20.0192293], [110.283061, 20.0192721], [110.283791, 20.019324], [110.284021, 20.0193346], [110.284411, 20.0193654], [110.285001, 20.0193963], [110.285501, 20.0194368], [110.285851, 20.019477], [110.286561, 20.0195371], [110.286801, 20.0195571], [110.288081, 20.0197059], [110.289511, 20.0198729], [110.289511, 20.019873], [110.289551, 20.0198729], [110.289802, 20.0199022], [110.290012, 20.0199115], [110.290162, 20.019921], [110.290402, 20.0199203], [110.291022, 20.019888], [110.291172, 20.0198674], [110.291503, 20.0198261], [110.291993, 20.0197339], [110.293294, 20.0194567], [110.293565, 20.0193952], [110.293895, 20.0193331], [110.294015, 20.0193124], [110.294135, 20.0193017], [110.294295, 20.0192807], [110.294926, 20.0192363], [110.295107, 20.019235], [110.295337, 20.0192433], [110.295808, 20.0192496], [110.297781, 20.0193019], [110.299534, 20.0193538], [110.300626, 20.0193914], [110.300877, 20.0193886], [110.301037, 20.0193966], [110.301959, 20.0194353], [110.30211, 20.0194434], [110.30226, 20.0194515], [110.302521, 20.0194781], [110.302891, 20.0195433], [110.303002, 20.0195619], [110.303573, 20.0196942], [110.303844, 20.0197706], [110.304255, 20.0198949], [110.304706, 20.0200285], [110.305217, 20.0201813], [110.305919, 20.020371], [110.307614, 20.0208955], [110.308487, 20.0211518], [110.309259, 20.0213795], [110.310292, 20.0216828], [110.310633, 20.0217772], [110.310844, 20.0218338], [110.311084, 20.0218898], [110.311486, 20.0219731], [110.313161, 20.0221549], [110.315067, 20.0223423], [110.316241, 20.0224421], [110.316241, 20.0224408], [110.316361, 20.0223987], [110.316672, 20.0223934], [110.317134, 20.0224355], [110.319591, 20.0226432], [110.319782, 20.02267], [110.320123, 20.0226942], [110.320173, 20.0227033], [110.320324, 20.0227308], [110.320524, 20.0228174], [110.320865, 20.0228417], [110.321668, 20.0228982], [110.32229, 20.0229179], [110.3224, 20.0229162], [110.323012, 20.0228062], [110.323593, 20.0226869], [110.324616, 20.0224207], [110.32605, 20.0220585], [110.32605, 20.0220581], [110.326762, 20.0219174], [110.326852, 20.0218962], [110.327143, 20.021872], [110.327354, 20.021849], [110.327875, 20.0218615], [110.328096, 20.0218683], [110.328597, 20.0219113], [110.328597, 20.021911], [110.328877, 20.0219571], [110.329058, 20.0219946], [110.329208, 20.0220225], [110.329299, 20.0220413], [110.329379, 20.0220703], [110.329379, 20.0220702], [110.329479, 20.0221089], [110.32975, 20.0223153], [110.32988, 20.0223536], [110.330432, 20.0225464], [110.331133, 20.0228676], [110.331133, 20.0228675], [110.331805, 20.0231793], [110.332196, 20.0234646], [110.332637, 20.0238395], [110.332797, 20.0239577], [110.333088, 20.0242645], [110.333088, 20.0242644], [110.333118, 20.0242941], [110.333679, 20.024878], [110.33376, 20.0249672], [110.334, 20.0251946], [110.334351, 20.025531], [110.334692, 20.0258776], [110.335554, 20.0267393], [110.336125, 20.0271941], [110.336125, 20.027194], [110.336436, 20.0273413], [110.336766, 20.0274985], [110.336766, 20.0274985], [110.336897, 20.0275273], [110.337468, 20.0277727], [110.338599, 20.0281243], [110.3388, 20.0281529], [110.33888, 20.0281325], [110.33898, 20.0280719], [110.33904, 20.0280215], [110.33921, 20.0277505], [110.33921, 20.0277502], [110.33941, 20.0273288], [110.33948, 20.0271885], [110.33958, 20.0270179], [110.33965, 20.0268276], [110.33975, 20.026597], [110.33986, 20.0263564], [110.33993, 20.0261861], [110.34014, 20.0257549], [110.34022, 20.0255945], [110.34042, 20.0255335], [110.34055, 20.0254128], [110.3408, 20.0250716], [110.34094, 20.0251109], [110.341, 20.0252007], [110.341, 20.0251997], [110.34089, 20.0254702], [110.34052, 20.0262122], [110.340441, 20.0264127], [110.340391, 20.026533], [110.340371, 20.0265831], [110.340221, 20.027014], [110.339961, 20.0276656], [110.339961, 20.0276656], [110.339881, 20.027856], [110.339771, 20.0281167], [110.339581, 20.0284679], [110.339511, 20.0286183], [110.339501, 20.0286383], [110.339311, 20.0289696], [110.339091, 20.029341], [110.339011, 20.0294815], [110.339011, 20.0294817], [110.338931, 20.0295923], [110.338581, 20.0300847], [110.338521, 20.0301552], [110.338081, 20.0307284], [110.33808, 20.0307284], [110.338231, 20.0308573], [110.338461, 20.0309857], [110.338712, 20.0311239], [110.339142, 20.0313611]]
    # # taix_lines = [{"coords":a_route,"lineStyle":{"normal":{"color":"rgba(223,90,90,1)"}}}]
    draw_route_map(taix_lines)